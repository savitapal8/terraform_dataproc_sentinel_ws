# This policy uses the Sentinel tfplan/v2 import to require that
# all GCE dataproc instances following all the policies

# Note that the comparison is case-sensitive.

import "strings"
import "types"
import "tfplan-functions" as plan

# Get all GCE dataproc instances
allDPInstances = plan.find_resources("google_dataproc_cluster")

# Filter to GCE dataproc instances with violations
# Warnings will be printed for all violations since the last parameter is true

//**********************Variables to be used*********************************
key = ""
selected_node = null
default_compute_sa = "compute@developer.gserviceaccount.com"

messages = {}
//***************************************************************************

check_key_existance = func(map_data, key) {
	keys_data = keys(map_data)
	result = false

	for keys_data as key_data {
		if key_data is key {
			result = true
			return result
		}
	}

	return result
}

create_sub_main_key_list = func(main_list, sub_list, address){
	if check_key_existance(main_list, address) is not true {
		main_list[address] = []
	}
	if check_key_existance(sub_list, address) is not true {
		sub_list[address] = []
	}

	return null
}

check_cluster_config = func(address, rc) {
	key = "cluster_config"
	selected_node = plan.evaluate_attribute(rc, key)
	
	if types.type_of(selected_node) is "null" {
		return plan.to_string(address) + " does not have "+ key +" defined"
	} else {
		return null
	}
}

check_gce_cluster_config = func(address, rc) {
	key = "gce_cluster_config"
	selected_node = plan.evaluate_attribute(rc, "cluster_config.0." + key)

	if types.type_of(selected_node) is "null" {
		return plan.to_string(address) + " does not have "+ key +" defined"
	} else {
		return null
	}
}

check_service_account_config = func(address, rc) {
	key = "service_account"	
	selected_node = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0." + key)
	
	if types.type_of(selected_node) is "null" {					
		result = plan.evaluate_attribute(rc.change.after_unknown, "cluster_config.0.gce_cluster_config.0." + key)
	
		if result is not "null" and result is not true {
			return "Dataproc service is not having any service account, please assign it"			
		} else {
			return null
		}
	
	} else {
			service_account_emailid = plan.evaluate_attribute(rc, "cluster_config.0.gce_cluster_config.0." + key)
				
			if types.type_of(service_account_emailid) is "null" {
				return "Dataproc service is not having any service account, please assign it"
			} else {
					arr_sa = strings.split(service_account_emailid,default_compute_sa)

					if length(arr_sa) > 1 {
						return "The service account of dataproc service can not be a default compute service account, please change it"						
					} else {
						return null
					}
			}	
	}	
}

//*******************validating gce cluster config && service account only************************************
messages_sa = {}
for allDPInstances as address, rc {
	message = null
	message = check_cluster_config(address, rc)

	if types.type_of(message) is not "null"{

		create_sub_main_key_list(messages, messages_sa, address)
		
		append(messages_sa[address],message)
		append(messages[address],message)

	} else {

		message = check_gce_cluster_config(address, rc)

		if types.type_of(message) is not "null"{

			create_sub_main_key_list(messages, messages_sa, address)

			append(messages_sa[address],message)
			append(messages[address],message)
		} else {
			message = check_service_account_config(address, rc)

			if types.type_of(message) is not "null" {
				
				create_sub_main_key_list(messages, messages_sa, address)
				
				append(messages_sa[address],message)
				append(messages[address],message)
			}
		}
	}
}
//********************************************************************************************************

GCP_DATAPROC_SA = rule {
  	length(messages_sa) is 0 
}

# Main rule
print(messages)

main = rule { GCP_DATAPROC_SA }